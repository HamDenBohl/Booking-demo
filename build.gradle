plugins {
	id 'org.springframework.boot' version '3.1.0'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'java'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.projectlombok:lombok:1.18.26'
	implementation 'org.mindrot:jbcrypt:0.4'
	implementation 'dk.digst:oiosaml3.java:3.2.1'
	runtimeOnly 'mysql:mysql-connector-java:8.0.33'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.testcontainers:mysql:1.17.3'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'com.fasterxml.jackson.core:jackson-annotations:2.13.4'
}

tasks.withType(org.springframework.boot.gradle.tasks.bundling.BootJar) {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

test {
	useJUnitPlatform()
}

tasks.register('removeDockerContainers', Exec) {
	description = 'Remove Docker containers defined in docker-compose.yml'
	group = 'docker'
	commandLine 'docker-compose', 'down'

	standardOutput = new ByteArrayOutputStream()
	errorOutput = new ByteArrayOutputStream()
}

tasks.register('removeMysqlImage', Exec) {
	dependsOn removeDockerContainers
	description = 'Remove all mysql image'
	group = 'docker'
	commandLine 'docker', 'rmi', 'mysql:8.0'
	ignoreExitValue = true  // Ignore errors if the image is not found or cannot be removed

	standardOutput = new ByteArrayOutputStream()
	errorOutput = new ByteArrayOutputStream()
	doLast{
		if(getExecutionResult().get() == 0){
			print(getExecutionResult().get())
			println "The task did not find or manage to remove the MySql image, make sure the image is updated and " +
					"remove manually if necessary"
		}
		}
	}

tasks.register('removeAppImage', Exec) {
	dependsOn removeMysqlImage
	description = 'Remove application image'
	group = 'docker'
	// Command to remove the booking-demo-demo-app image
	commandLine 'docker', 'rmi', 'booking-demo-demo-app:latest'
	ignoreExitValue = true  // Ignore errors if the image is not found or cannot be removed
	doLast{
		if(getExecutionResult().get() == 0){
			print(getExecutionResult().get())
			println "The task did not find or manage to remove the App image, make sure the image is updated and remove" +
					"manually if necessary"
		}
	}
	standardOutput = new ByteArrayOutputStream()
	errorOutput = new ByteArrayOutputStream()
}

tasks.register('buildDockerImages', Exec) {
	dependsOn removeAppImage
	description = 'Build Docker images defined in docker-compose.yml'
	group = 'docker'

	commandLine 'docker-compose', 'build'

	standardOutput = new ByteArrayOutputStream()
	errorOutput = new ByteArrayOutputStream()
}


tasks.register('restartDockerContainers', Exec) {
	dependsOn buildDockerImages
	description = 'Restart Docker containers defined in docker-compose.yml'
	group = 'docker'

	commandLine 'docker-compose', 'up', '-d'

	standardOutput = new ByteArrayOutputStream()
	errorOutput = new ByteArrayOutputStream()

	doLast {
		println "Standard Output: ${standardOutput.toString()}"
		println "Error Output: ${errorOutput.toString()}"
	}

	execResult = exec {
		executable gradleExecutable
		args 'clean', 'build', '-x', 'test'
		standardOutput = this.standardOutput
		errorOutput = this.errorOutput
	}

	execResult.assertNormalExitValue()
	execResult.rethrowFailure()
}

tasks.register('startDockerContainers', Exec) {
	description = 'Starts Docker containers defined in docker-compose.yml'
	group = 'docker'

	commandLine 'docker-compose', 'up', '-d'

	standardOutput = new ByteArrayOutputStream()
	errorOutput = new ByteArrayOutputStream()
}


tasks.register('cleanBuild', Exec){
	description = 'cleans and build the project without running test'
	group = 'docker'
// Use 'gradlew' if using the wrapper, otherwise use 'gradle'
	def gradleExecutable = './gradle'

	commandLine gradleExecutable, 'clean', 'build', '-x', 'test'
}